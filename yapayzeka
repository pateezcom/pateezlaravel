languages.blade.php içeriği



@extends('layouts/layoutMaster')

@section('title', 'Dil Ayarları')

@section('vendor-style')
@vite([
  'resources/assets/vendor/libs/datatables-bs5/datatables.bootstrap5.scss',
  'resources/assets/vendor/libs/datatables-responsive-bs5/responsive.bootstrap5.scss',
  'resources/assets/vendor/libs/datatables-buttons-bs5/buttons.bootstrap5.scss',
  'resources/assets/vendor/libs/select2/select2.scss',
  'resources/assets/vendor/libs/@form-validation/form-validation.scss'
])
@endsection

@section('vendor-script')
@vite([
  'resources/assets/vendor/libs/moment/moment.js',
  'resources/assets/vendor/libs/datatables-bs5/datatables-bootstrap5.js',
  'resources/assets/vendor/libs/datatables-buttons/buttons.bootstrap5.js',
  'resources/assets/vendor/libs/jszip/jszip.js',
  'resources/assets/vendor/libs/pdfmake/pdfmake.js',
  'resources/assets/vendor/libs/datatables-buttons/buttons.html5.js',
  'resources/assets/vendor/libs/datatables-buttons/buttons.print.js',
  'resources/assets/vendor/libs/select2/select2.js',
  'resources/assets/vendor/libs/@form-validation/popular.js',
  'resources/assets/vendor/libs/@form-validation/bootstrap5.js',
  'resources/assets/vendor/libs/@form-validation/auto-focus.js',
  'resources/assets/vendor/libs/cleavejs/cleave.js',
  'resources/assets/vendor/libs/cleavejs/cleave-phone.js'
])
@endsection

@section('content')
<div class="card">
  <div class="card-header border-bottom">
    <h5 class="card-title mb-0">Dil Yönetimi</h5>
  </div>
  <div class="card-datatable table-responsive">
    <table class="datatables-languages table border-top">
      <thead>
        <tr>
          <th></th>
          <th>Id</th>
          <th>Dil adı</th>
          <th>Varsayılan dil</th>
          <th>Çeviri/Dışa aktar</th>
          <th>Seçenekler</th>
        </tr>
      </thead>
    </table>
  </div>

<!-- Modallar -->
@include('content.admin._partials._modals.modal-language-add')
@include('content.admin._partials._modals.modal-language-edit')
@include('content.admin._partials._modals.modal-language-import')
<!-- /Modallar -->
@endsection

@section('page-script')
@vite([
  'resources/js/admin/settings/languages.js',
  'resources/js/admin/settings/language-form-validation.js'
])
@endsection


modal-language-import.blade.php içeriği

<!-- Import Language Modal -->
<div class="modal fade" id="importLanguageModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header position-relative">
        <button type="button" class="btn-close position-absolute top-0 end-0 mt-3 me-3" data-bs-dismiss="modal" aria-label="Close"></button>
        <h5 class="modal-title w-100 text-center">Dil İçe Aktar</h5>
      </div>
      <div class="modal-body p-4">
        <div class="text-center mb-4">
          <p>JSON dil dosyasını yükleyin</p>
        </div>

        <form id="importLanguageForm" class="row g-3">
          <div class="col-12 mb-3">
            <label class="form-label" for="languageFile">JSON Dil Dosyası</label>
            <input class="form-control" type="file" id="languageFile">
          </div>
          <div class="col-12 text-center mt-4">
            <button type="submit" class="btn btn-primary me-3">İçe Aktar</button>
            <button type="reset" class="btn btn-label-secondary" data-bs-dismiss="modal" aria-label="Close">İptal</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>
<!--/ Import Language Modal -->


LanguageController.php içeriği
<?php

namespace App\Http\Controllers\Admin\Settings;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Validator;

class LanguageController extends Controller
{
  /**
   * Display the language settings page
   * Dil ayarları sayfasını görüntüler
   *
   * @return \Illuminate\View\View|\Illuminate\Http\JsonResponse
   */
  public function index(Request $request)
  {
    $pageConfigs = ['layoutType' => 'content-detached-right-sidebar'];

    // AJAX isteği ise JSON olarak dön
    if ($request->ajax()) {
      $languages = DB::table('languages')->get();
      return response()->json(['data' => $languages]);
    }

    // Normal sayfa yükleme
    return view('content.admin.settings.languages', [
      'pageConfigs' => $pageConfigs
    ]);
  }

  /**
   * Store a newly created language in database
   * Yeni bir dili veritabanına kaydeder
   *
   * @param  \Illuminate\Http\Request  $request
   * @return \Illuminate\Http\Response
   */
  public function store(Request $request)
  {
    // Validate the form data
    $validator = Validator::make($request->all(), [
      'languageName' => [
        'required',
        'string',
        'max:255',
        function ($attribute, $value, $fail) {
          // Dil adı benzersiz olmalı
          $exists = DB::table('languages')->where('name', $value)->exists();
          if ($exists) {
            $fail('Bu dil adı zaten kayıtlı');
          }
        },
      ],
      'shortForm' => [
        'required',
        'string',
        'max:5',
        function ($attribute, $value, $fail) {
          // Kısa form benzersiz olmalı
          $exists = DB::table('languages')->where('code', $value)->exists();
          if ($exists) {
            $fail('Bu kısa form zaten kayıtlı');
          }
        },
      ],
      'languageCode' => [
        'required',
        'string',
        'max:10',
        function ($attribute, $value, $fail) {
          // Dil kodu benzersiz olmalı
          $exists = DB::table('languages')->where('code', $value)->exists();
          if ($exists) {
            $fail('Bu dil kodu zaten kayıtlı');
          }
        },
      ],
      'orderInput' => 'required|integer'
    ]);

    if ($validator->fails()) {
      return response()->json(['success' => false, 'errors' => $validator->errors()], 422);
    }

    // Yazı yönünü belirle
    $textDirection = $request->has('textDirection') ? $request->input('textDirection') : 'ltr';
    $isRTL = $textDirection === 'rtl' ? 1 : 0;

    // Durumu belirle
    $status = $request->has('status') ? $request->input('status') : 'active';
    $isActive = $status === 'active' || $status === 'statusActive' ? 1 : 0;

    try {
      // Dili veritabanına ekle
      $languageId = DB::table('languages')->insertGetId([
        'name' => $request->input('languageName'),
        'code' => $request->input('shortForm'),
        'icon' => 'flag-icon-' . strtolower($request->input('shortForm')),
        'text_editor_lang' => $request->input('textEditorLanguage'),
        'is_rtl' => $isRTL,
        'is_default' => 0, // Yeni dil varsayılan değil
        'is_active' => $isActive,
        'created_at' => now(),
        'updated_at' => now()
      ]);

      // Başarılı cevap döndür
      return response()->json([
        'success' => true,
        'message' => 'Dil başarıyla eklendi',
        'language_id' => $languageId
      ]);
    } catch (\Exception $e) {
      return response()->json([
        'success' => false,
        'error' => 'Dil eklenirken bir hata oluştu: ' . $e->getMessage()
      ], 500);
    }
  }

  /**
   * Get language details for editing
   * Düzenleme için dil detaylarını getirir
   *
   * @param  int  $id
   * @return \Illuminate\Http\Response
   */
  public function edit($id)
  {
    $language = DB::table('languages')->where('id', $id)->first();

    if (!$language) {
      return response()->json(['error' => 'Dil bulunamadı'], 404);
    }

    return response()->json(['language' => $language]);
  }

  /**
   * Update the specified language in storage
   * Belirtilen dili günceller
   *
   * @param  \Illuminate\Http\Request  $request
   * @param  int  $id
   * @return \Illuminate\Http\Response
   */
  public function update(Request $request, $id)
  {
    // Validate the form data
    $validator = Validator::make($request->all(), [
      'editLanguageName' => [
        'required',
        'string',
        'max:255',
        function ($attribute, $value, $fail) use ($id) {
          // Dil adı benzersiz olmalı (kendi dışında)
          $exists = DB::table('languages')
            ->where('name', $value)
            ->where('id', '!=', $id)
            ->exists();
          if ($exists) {
            $fail('Bu dil adı zaten kayıtlı');
          }
        },
      ],
      'editShortForm' => [
        'required',
        'string',
        'max:5',
        function ($attribute, $value, $fail) use ($id) {
          // Kısa form benzersiz olmalı (kendi dışında)
          $exists = DB::table('languages')
            ->where('code', $value)
            ->where('id', '!=', $id)
            ->exists();
          if ($exists) {
            $fail('Bu kısa form zaten kayıtlı');
          }
        },
      ],
      'editLanguageCode' => [
        'required',
        'string',
        'max:10',
        function ($attribute, $value, $fail) use ($id) {
          // Dil kodu benzersiz olmalı (kendi dışında)
          $exists = DB::table('languages')
            ->where('code', $value)
            ->where('id', '!=', $id)
            ->exists();
          if ($exists) {
            $fail('Bu dil kodu zaten kayıtlı');
          }
        },
      ],
      'editOrderInput' => 'required|integer'
    ]);

    if ($validator->fails()) {
      return response()->json(['success' => false, 'errors' => $validator->errors()], 422);
    }

    // Düzenlenecek dili kontrol et
    $currentLanguage = DB::table('languages')->where('id', $id)->first();

    if (!$currentLanguage) {
      return response()->json([
        'success' => false,
        'error' => 'Düzenlenecek dil bulunamadı'
      ], 404);
    }

    // Yazı yönünü belirle
    $textDirection = $request->has('editTextDirection') ? $request->input('editTextDirection') : 'ltr';
    $isRTL = $textDirection === 'rtl' ? 1 : 0;

    // Durumu belirle
    $status = $request->has('editStatus') ? $request->input('editStatus') : 'active';
    $isActive = $status === 'active' || $status === 'statusActive' ? 1 : 0;

    try {
      // Dili güncelle
      DB::table('languages')
        ->where('id', $id)
        ->update([
          'name' => $request->input('editLanguageName'),
          'code' => $request->input('editShortForm'),
          'icon' => 'flag-icon-' . strtolower($request->input('editShortForm')),
          'text_editor_lang' => $request->input('editTextEditorLanguage'),
          'is_rtl' => $isRTL,
          'is_active' => $isActive,
          'updated_at' => now()
        ]);

      // Başarılı cevap döndür
      return response()->json([
        'success' => true,
        'message' => 'Dil başarıyla güncellendi'
      ]);
    } catch (\Exception $e) {
      return response()->json([
        'success' => false,
        'error' => 'Dil güncellenirken bir hata oluştu: ' . $e->getMessage()
      ], 500);
    }
  }

  /**
   * Remove the specified language from storage
   * Belirtilen dili siler
   *
   * @param  int  $id
   * @return \Illuminate\Http\Response
   */
  public function destroy($id)
  {
    // Önce varsayılan dili kontrol et
    $language = DB::table('languages')->where('id', $id)->first();

    if (!$language) {
      return response()->json(['error' => 'Dil bulunamadı'], 404);
    }

    // Varsayılan dil silinemez
    if ($language->is_default == 1) {
      return response()->json(['error' => 'Varsayılan dil silinemez'], 400);
    }

    // Dili sil
    DB::table('languages')->where('id', $id)->delete();

    // Bu dile ait çevirileri de sil
    DB::table('translations')->where('language_id', $id)->delete();

    // Başarılı cevap döndür
    return response()->json([
      'success' => true,
      'message' => 'Dil ve ilgili çeviriler başarıyla silindi'
    ]);
  }

  /**
   * Set a language as default
   * Bir dili varsayılan olarak ayarlar
   *
   * @param  int  $id
   * @return \Illuminate\Http\Response
   */
  public function setDefault($id)
  {
    // Önce tüm dilleri varsayılan olmayan olarak işaretle
    DB::table('languages')
      ->update(['is_default' => 0]);

    // Seçilen dili varsayılan olarak işaretle
    DB::table('languages')
      ->where('id', $id)
      ->update([
        'is_default' => 1,
        'is_active' => 1, // Varsayılan dil her zaman aktif olmalı
        'updated_at' => now()
      ]);

    // Başarılı cevap döndür
    return response()->json([
      'success' => true,
      'message' => 'Varsayılan dil başarıyla güncellendi'
    ]);
  }

  /**
   * Import language file
   * Dil dosyasını içe aktarır
   *
   * @param  \Illuminate\Http\Request  $request
   * @return \Illuminate\Http\Response
   */
  public function import(Request $request)
  {
    // Dosya yükleme kontrolü
    if (!$request->hasFile('languageFile')) {
      return response()->json(['error' => 'Dosya bulunamadı'], 400);
    }

    $file = $request->file('languageFile');

    // JSON dosyası mı kontrol et
    if ($file->getClientOriginalExtension() !== 'json') {
      return response()->json(['error' => 'Dosya JSON formatında olmalıdır'], 400);
    }

    try {
      // JSON dosyasını oku
      $content = file_get_contents($file->getRealPath());
      $languageData = json_decode($content, true);

      if (json_last_error() !== JSON_ERROR_NONE) {
        return response()->json(['error' => 'Geçersiz JSON formatı'], 400);
      }

      // Dil bilgilerini kontrol et
      if (!isset($languageData['language']) || !isset($languageData['translations'])) {
        return response()->json(['error' => 'Geçersiz dil dosyası formatı'], 400);
      }

      DB::beginTransaction();
      try {
        // Dil kaydı ekle
        $language = $languageData['language'];
        $shortForm = $language['short_form'];

        // Dil zaten var mı kontrol et
        $existingLanguage = DB::table('languages')
          ->where('code', $shortForm)
          ->first();

        if ($existingLanguage) {
          // Dil zaten varsa güncelle
          $languageId = $existingLanguage->id;

          DB::table('languages')
            ->where('id', $languageId)
            ->update([
              'name' => $language['name'],
              'is_rtl' => $language['text_direction'] === 'rtl' ? 1 : 0,
              'updated_at' => now()
            ]);

          // Eski çevirileri sil
          DB::table('translations')
            ->where('language_id', $languageId)
            ->delete();
        } else {
          // Yeni dil ekle
          $languageId = DB::table('languages')->insertGetId([
            'name' => $language['name'],
            'code' => $shortForm,
            'icon' => 'flag-icon-' . strtolower($shortForm),
            'text_editor_lang' => $language['text_editor_lang'] ?? $shortForm,
            'is_rtl' => $language['text_direction'] === 'rtl' ? 1 : 0,
            'is_default' => 0,
            'is_active' => 1,
            'created_at' => now(),
            'updated_at' => now()
          ]);
        }

        // Çevirileri ekle
        $translations = $languageData['translations'];
        $translationData = [];

        foreach ($translations as $translation) {
          $translationData[] = [
            'language_id' => $languageId,
            'group' => 'default',
            'key' => $translation['label'],
            'value' => $translation['translation'],
            'created_at' => now(),
            'updated_at' => now()
          ];
        }

        // Çevirileri toplu ekle
        DB::table('translations')->insert($translationData);

        DB::commit();

        return response()->json([
          'success' => true,
          'message' => 'Dil başarıyla içe aktarıldı'
        ]);
      } catch (\Exception $e) {
        DB::rollBack();
        return response()->json(['error' => 'İşlem sırasında bir hata oluştu: ' . $e->getMessage()], 500);
      }
    } catch (\Exception $e) {
      return response()->json(['error' => 'Dosya işlenirken bir hata oluştu: ' . $e->getMessage()], 500);
    }
  }

  /**
   * Export language translations to JSON file
   * Dil çevirilerini JSON dosyasına aktarır
   *
   * @param  int  $id
   * @return \Illuminate\Http\Response
   */
  public function export($id)
  {
    // Dili kontrol et
    $language = DB::table('languages')->where('id', $id)->first();

    if (!$language) {
      return response()->json(['error' => 'Dil bulunamadı'], 404);
    }

    // Dile ait çevirileri getir
    $translations = DB::table('translations')
      ->where('language_id', $id)
      ->get();

    // JSON formatı için veriyi hazırla
    $exportData = [
      'language' => [
        'name' => $language->name,
        'short_form' => $language->code,
        'language_code' => $language->code . '-' . strtoupper($language->code),
        'text_direction' => $language->is_rtl ? 'rtl' : 'ltr',
        'text_editor_lang' => $language->text_editor_lang ?? $language->code
      ],
      'translations' => []
    ];

    foreach ($translations as $translation) {
      $exportData['translations'][] = [
        'label' => $translation->key,
        'translation' => $translation->value
      ];
    }

    // JSON formatına dönüştür
    $jsonContent = json_encode($exportData, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);

    // Dosyayı indirme başlıklarını ayarla
    $headers = [
      'Content-Type' => 'application/json',
      'Content-Disposition' => 'attachment; filename="' . $language->name . '.json"',
    ];

    // JSON içeriğini döndür
    return response($jsonContent, 200, $headers);
  }

  /**
   * Check if a field value is unique in languages table
   * Dil alanları için benzersizlik kontrolü yapar
   *
   * @param  \Illuminate\Http\Request  $request
   * @return \Illuminate\Http\Response
   */
  public function checkUnique(Request $request)
  {
    $field = $request->input('field');
    $value = $request->input('value');
    $excludeId = $request->input('exclude_id');

    // Hangi alanı kontrol edeceğiz?
    $dbField = '';
    switch ($field) {
      case 'languageName':
      case 'editLanguageName':
        $dbField = 'name';
        break;
      case 'shortForm':
      case 'editShortForm':
      case 'languageCode':
      case 'editLanguageCode':
        $dbField = 'code';
        break;
      default:
        return response()->json(['unique' => true], 200);
    }

    // Var olan kayıt için sorgu hazırla
    $query = DB::table('languages')->where($dbField, $value);

    // Eğer exclude_id belirtilmişse, bu ID'yi kontrol dışı bırak
    if ($excludeId) {
      $query->where('id', '!=', $excludeId);
    }

    // Kayıt var mı kontrol et
    $exists = $query->exists();

    // Sonuç dön - eğer kayıt yoksa unique'dir
    return response()->json(['unique' => !$exists], 200);
  }
}

































aşağıdaki verdiğim kodları iyice incele ekte verdiğim json dosyasını yüklediğimde hem yeni dil olarak eklesin hemde çevirileri eklesin dil ismini kontrol etsin eklemedn çöce eğer dil varsa bu dil zaten ekli desin tablolarımıda verdim bak ekte ÖNEMLİ SAKIN BAŞKA HÇBİRŞEYİ BOZMA


languages.blade.php içeriği



@extends('layouts/layoutMaster')

@section('title', 'Dil Ayarları')

@section('vendor-style')
@vite([
  'resources/assets/vendor/libs/datatables-bs5/datatables.bootstrap5.scss',
  'resources/assets/vendor/libs/datatables-responsive-bs5/responsive.bootstrap5.scss',
  'resources/assets/vendor/libs/datatables-buttons-bs5/buttons.bootstrap5.scss',
  'resources/assets/vendor/libs/select2/select2.scss',
  'resources/assets/vendor/libs/@form-validation/form-validation.scss'
])
@endsection

@section('vendor-script')
@vite([
  'resources/assets/vendor/libs/moment/moment.js',
  'resources/assets/vendor/libs/datatables-bs5/datatables-bootstrap5.js',
  'resources/assets/vendor/libs/datatables-buttons/buttons.bootstrap5.js',
  'resources/assets/vendor/libs/jszip/jszip.js',
  'resources/assets/vendor/libs/pdfmake/pdfmake.js',
  'resources/assets/vendor/libs/datatables-buttons/buttons.html5.js',
  'resources/assets/vendor/libs/datatables-buttons/buttons.print.js',
  'resources/assets/vendor/libs/select2/select2.js',
  'resources/assets/vendor/libs/@form-validation/popular.js',
  'resources/assets/vendor/libs/@form-validation/bootstrap5.js',
  'resources/assets/vendor/libs/@form-validation/auto-focus.js',
  'resources/assets/vendor/libs/cleavejs/cleave.js',
  'resources/assets/vendor/libs/cleavejs/cleave-phone.js'
])
@endsection

@section('content')
<div class="card">
  <div class="card-header border-bottom">
    <h5 class="card-title mb-0">Dil Yönetimi</h5>
  </div>
  <div class="card-datatable table-responsive">
    <table class="datatables-languages table border-top">
      <thead>
        <tr>
          <th></th>
          <th>Id</th>
          <th>Dil adı</th>
          <th>Varsayılan dil</th>
          <th>Çeviri/Dışa aktar</th>
          <th>Seçenekler</th>
        </tr>
      </thead>
    </table>
  </div>

<!-- Modallar -->
@include('content.admin._partials._modals.modal-language-add')
@include('content.admin._partials._modals.modal-language-edit')
@include('content.admin._partials._modals.modal-language-import')
<!-- /Modallar -->
@endsection

@section('page-script')
@vite([
  'resources/js/admin/settings/languages.js',
  'resources/js/admin/settings/language-form-validation.js'
])
@endsection


modal-language-import.blade.php içeriği

<!-- Import Language Modal -->
<div class="modal fade" id="importLanguageModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header position-relative">
        <button type="button" class="btn-close position-absolute top-0 end-0 mt-3 me-3" data-bs-dismiss="modal" aria-label="Close"></button>
        <h5 class="modal-title w-100 text-center">Dil İçe Aktar</h5>
      </div>
      <div class="modal-body p-4">
        <div class="text-center mb-4">
          <p>JSON dil dosyasını yükleyin</p>
        </div>

        <form id="importLanguageForm" class="row g-3">
          <div class="col-12 mb-3">
            <label class="form-label" for="languageFile">JSON Dil Dosyası</label>
            <input class="form-control" type="file" id="languageFile">
          </div>
          <div class="col-12 text-center mt-4">
            <button type="submit" class="btn btn-primary me-3">İçe Aktar</button>
            <button type="reset" class="btn btn-label-secondary" data-bs-dismiss="modal" aria-label="Close">İptal</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>
<!--/ Import Language Modal -->


LanguageController.php içeriği
<?php

namespace App\Http\Controllers\Admin\Settings;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Validator;

class LanguageController extends Controller
{
  /**
   * Display the language settings page
   * Dil ayarları sayfasını görüntüler
   *
   * @return \Illuminate\View\View|\Illuminate\Http\JsonResponse
   */
  public function index(Request $request)
  {
    $pageConfigs = ['layoutType' => 'content-detached-right-sidebar'];

    // AJAX isteği ise JSON olarak dön
    if ($request->ajax()) {
      $languages = DB::table('languages')->get();
      return response()->json(['data' => $languages]);
    }

    // Normal sayfa yükleme
    return view('content.admin.settings.languages', [
      'pageConfigs' => $pageConfigs
    ]);
  }

  /**
   * Store a newly created language in database
   * Yeni bir dili veritabanına kaydeder
   *
   * @param  \Illuminate\Http\Request  $request
   * @return \Illuminate\Http\Response
   */
  public function store(Request $request)
  {
    // Validate the form data
    $validator = Validator::make($request->all(), [
      'languageName' => [
        'required',
        'string',
        'max:255',
        function ($attribute, $value, $fail) {
          // Dil adı benzersiz olmalı
          $exists = DB::table('languages')->where('name', $value)->exists();
          if ($exists) {
            $fail('Bu dil adı zaten kayıtlı');
          }
        },
      ],
      'shortForm' => [
        'required',
        'string',
        'max:5',
        function ($attribute, $value, $fail) {
          // Kısa form benzersiz olmalı
          $exists = DB::table('languages')->where('code', $value)->exists();
          if ($exists) {
            $fail('Bu kısa form zaten kayıtlı');
          }
        },
      ],
      'languageCode' => [
        'required',
        'string',
        'max:10',
        function ($attribute, $value, $fail) {
          // Dil kodu benzersiz olmalı
          $exists = DB::table('languages')->where('code', $value)->exists();
          if ($exists) {
            $fail('Bu dil kodu zaten kayıtlı');
          }
        },
      ],
      'orderInput' => 'required|integer'
    ]);

    if ($validator->fails()) {
      return response()->json(['success' => false, 'errors' => $validator->errors()], 422);
    }

    // Yazı yönünü belirle
    $textDirection = $request->has('textDirection') ? $request->input('textDirection') : 'ltr';
    $isRTL = $textDirection === 'rtl' ? 1 : 0;

    // Durumu belirle
    $status = $request->has('status') ? $request->input('status') : 'active';
    $isActive = $status === 'active' || $status === 'statusActive' ? 1 : 0;

    try {
      // Dili veritabanına ekle
      $languageId = DB::table('languages')->insertGetId([
        'name' => $request->input('languageName'),
        'code' => $request->input('shortForm'),
        'icon' => 'flag-icon-' . strtolower($request->input('shortForm')),
        'text_editor_lang' => $request->input('textEditorLanguage'),
        'is_rtl' => $isRTL,
        'is_default' => 0, // Yeni dil varsayılan değil
        'is_active' => $isActive,
        'created_at' => now(),
        'updated_at' => now()
      ]);

      // Başarılı cevap döndür
      return response()->json([
        'success' => true,
        'message' => 'Dil başarıyla eklendi',
        'language_id' => $languageId
      ]);
    } catch (\Exception $e) {
      return response()->json([
        'success' => false,
        'error' => 'Dil eklenirken bir hata oluştu: ' . $e->getMessage()
      ], 500);
    }
  }

  /**
   * Get language details for editing
   * Düzenleme için dil detaylarını getirir
   *
   * @param  int  $id
   * @return \Illuminate\Http\Response
   */
  public function edit($id)
  {
    $language = DB::table('languages')->where('id', $id)->first();

    if (!$language) {
      return response()->json(['error' => 'Dil bulunamadı'], 404);
    }

    return response()->json(['language' => $language]);
  }

  /**
   * Update the specified language in storage
   * Belirtilen dili günceller
   *
   * @param  \Illuminate\Http\Request  $request
   * @param  int  $id
   * @return \Illuminate\Http\Response
   */
  public function update(Request $request, $id)
  {
    // Validate the form data
    $validator = Validator::make($request->all(), [
      'editLanguageName' => [
        'required',
        'string',
        'max:255',
        function ($attribute, $value, $fail) use ($id) {
          // Dil adı benzersiz olmalı (kendi dışında)
          $exists = DB::table('languages')
            ->where('name', $value)
            ->where('id', '!=', $id)
            ->exists();
          if ($exists) {
            $fail('Bu dil adı zaten kayıtlı');
          }
        },
      ],
      'editShortForm' => [
        'required',
        'string',
        'max:5',
        function ($attribute, $value, $fail) use ($id) {
          // Kısa form benzersiz olmalı (kendi dışında)
          $exists = DB::table('languages')
            ->where('code', $value)
            ->where('id', '!=', $id)
            ->exists();
          if ($exists) {
            $fail('Bu kısa form zaten kayıtlı');
          }
        },
      ],
      'editLanguageCode' => [
        'required',
        'string',
        'max:10',
        function ($attribute, $value, $fail) use ($id) {
          // Dil kodu benzersiz olmalı (kendi dışında)
          $exists = DB::table('languages')
            ->where('code', $value)
            ->where('id', '!=', $id)
            ->exists();
          if ($exists) {
            $fail('Bu dil kodu zaten kayıtlı');
          }
        },
      ],
      'editOrderInput' => 'required|integer'
    ]);

    if ($validator->fails()) {
      return response()->json(['success' => false, 'errors' => $validator->errors()], 422);
    }

    // Düzenlenecek dili kontrol et
    $currentLanguage = DB::table('languages')->where('id', $id)->first();

    if (!$currentLanguage) {
      return response()->json([
        'success' => false,
        'error' => 'Düzenlenecek dil bulunamadı'
      ], 404);
    }

    // Yazı yönünü belirle
    $textDirection = $request->has('editTextDirection') ? $request->input('editTextDirection') : 'ltr';
    $isRTL = $textDirection === 'rtl' ? 1 : 0;

    // Durumu belirle
    $status = $request->has('editStatus') ? $request->input('editStatus') : 'active';
    $isActive = $status === 'active' || $status === 'statusActive' ? 1 : 0;

    try {
      // Dili güncelle
      DB::table('languages')
        ->where('id', $id)
        ->update([
          'name' => $request->input('editLanguageName'),
          'code' => $request->input('editShortForm'),
          'icon' => 'flag-icon-' . strtolower($request->input('editShortForm')),
          'text_editor_lang' => $request->input('editTextEditorLanguage'),
          'is_rtl' => $isRTL,
          'is_active' => $isActive,
          'updated_at' => now()
        ]);

      // Başarılı cevap döndür
      return response()->json([
        'success' => true,
        'message' => 'Dil başarıyla güncellendi'
      ]);
    } catch (\Exception $e) {
      return response()->json([
        'success' => false,
        'error' => 'Dil güncellenirken bir hata oluştu: ' . $e->getMessage()
      ], 500);
    }
  }

  /**
   * Remove the specified language from storage
   * Belirtilen dili siler
   *
   * @param  int  $id
   * @return \Illuminate\Http\Response
   */
  public function destroy($id)
  {
    // Önce varsayılan dili kontrol et
    $language = DB::table('languages')->where('id', $id)->first();

    if (!$language) {
      return response()->json(['error' => 'Dil bulunamadı'], 404);
    }

    // Varsayılan dil silinemez
    if ($language->is_default == 1) {
      return response()->json(['error' => 'Varsayılan dil silinemez'], 400);
    }

    // Dili sil
    DB::table('languages')->where('id', $id)->delete();

    // Bu dile ait çevirileri de sil
    DB::table('translations')->where('language_id', $id)->delete();

    // Başarılı cevap döndür
    return response()->json([
      'success' => true,
      'message' => 'Dil ve ilgili çeviriler başarıyla silindi'
    ]);
  }

  /**
   * Set a language as default
   * Bir dili varsayılan olarak ayarlar
   *
   * @param  int  $id
   * @return \Illuminate\Http\Response
   */
  public function setDefault($id)
  {
    // Önce tüm dilleri varsayılan olmayan olarak işaretle
    DB::table('languages')
      ->update(['is_default' => 0]);

    // Seçilen dili varsayılan olarak işaretle
    DB::table('languages')
      ->where('id', $id)
      ->update([
        'is_default' => 1,
        'is_active' => 1, // Varsayılan dil her zaman aktif olmalı
        'updated_at' => now()
      ]);

    // Başarılı cevap döndür
    return response()->json([
      'success' => true,
      'message' => 'Varsayılan dil başarıyla güncellendi'
    ]);
  }

  /**
   * Import language file
   * Dil dosyasını içe aktarır
   *
   * @param  \Illuminate\Http\Request  $request
   * @return \Illuminate\Http\Response
   */
  public function import(Request $request)
  {
    // Dosya yükleme kontrolü
    if (!$request->hasFile('languageFile')) {
      return response()->json(['error' => 'Dosya bulunamadı'], 400);
    }

    $file = $request->file('languageFile');

    // JSON dosyası mı kontrol et
    if ($file->getClientOriginalExtension() !== 'json') {
      return response()->json(['error' => 'Dosya JSON formatında olmalıdır'], 400);
    }

    try {
      // JSON dosyasını oku
      $content = file_get_contents($file->getRealPath());
      $languageData = json_decode($content, true);

      if (json_last_error() !== JSON_ERROR_NONE) {
        return response()->json(['error' => 'Geçersiz JSON formatı'], 400);
      }

      // Dil bilgilerini kontrol et
      if (!isset($languageData['language']) || !isset($languageData['translations'])) {
        return response()->json(['error' => 'Geçersiz dil dosyası formatı'], 400);
      }

      DB::beginTransaction();
      try {
        // Dil kaydı ekle
        $language = $languageData['language'];
        $shortForm = $language['short_form'];

        // Dil zaten var mı kontrol et
        $existingLanguage = DB::table('languages')
          ->where('code', $shortForm)
          ->first();

        if ($existingLanguage) {
          // Dil zaten varsa güncelle
          $languageId = $existingLanguage->id;

          DB::table('languages')
            ->where('id', $languageId)
            ->update([
              'name' => $language['name'],
              'is_rtl' => $language['text_direction'] === 'rtl' ? 1 : 0,
              'updated_at' => now()
            ]);

          // Eski çevirileri sil
          DB::table('translations')
            ->where('language_id', $languageId)
            ->delete();
        } else {
          // Yeni dil ekle
          $languageId = DB::table('languages')->insertGetId([
            'name' => $language['name'],
            'code' => $shortForm,
            'icon' => 'flag-icon-' . strtolower($shortForm),
            'text_editor_lang' => $language['text_editor_lang'] ?? $shortForm,
            'is_rtl' => $language['text_direction'] === 'rtl' ? 1 : 0,
            'is_default' => 0,
            'is_active' => 1,
            'created_at' => now(),
            'updated_at' => now()
          ]);
        }

        // Çevirileri ekle
        $translations = $languageData['translations'];
        $translationData = [];

        foreach ($translations as $translation) {
          $translationData[] = [
            'language_id' => $languageId,
            'group' => 'default',
            'key' => $translation['label'],
            'value' => $translation['translation'],
            'created_at' => now(),
            'updated_at' => now()
          ];
        }

        // Çevirileri toplu ekle
        DB::table('translations')->insert($translationData);

        DB::commit();

        return response()->json([
          'success' => true,
          'message' => 'Dil başarıyla içe aktarıldı'
        ]);
      } catch (\Exception $e) {
        DB::rollBack();
        return response()->json(['error' => 'İşlem sırasında bir hata oluştu: ' . $e->getMessage()], 500);
      }
    } catch (\Exception $e) {
      return response()->json(['error' => 'Dosya işlenirken bir hata oluştu: ' . $e->getMessage()], 500);
    }
  }

  /**
   * Export language translations to JSON file
   * Dil çevirilerini JSON dosyasına aktarır
   *
   * @param  int  $id
   * @return \Illuminate\Http\Response
   */
  public function export($id)
  {
    // Dili kontrol et
    $language = DB::table('languages')->where('id', $id)->first();

    if (!$language) {
      return response()->json(['error' => 'Dil bulunamadı'], 404);
    }

    // Dile ait çevirileri getir
    $translations = DB::table('translations')
      ->where('language_id', $id)
      ->get();

    // JSON formatı için veriyi hazırla
    $exportData = [
      'language' => [
        'name' => $language->name,
        'short_form' => $language->code,
        'language_code' => $language->code . '-' . strtoupper($language->code),
        'text_direction' => $language->is_rtl ? 'rtl' : 'ltr',
        'text_editor_lang' => $language->text_editor_lang ?? $language->code
      ],
      'translations' => []
    ];

    foreach ($translations as $translation) {
      $exportData['translations'][] = [
        'label' => $translation->key,
        'translation' => $translation->value
      ];
    }

    // JSON formatına dönüştür
    $jsonContent = json_encode($exportData, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);

    // Dosyayı indirme başlıklarını ayarla
    $headers = [
      'Content-Type' => 'application/json',
      'Content-Disposition' => 'attachment; filename="' . $language->name . '.json"',
    ];

    // JSON içeriğini döndür
    return response($jsonContent, 200, $headers);
  }

  /**
   * Check if a field value is unique in languages table
   * Dil alanları için benzersizlik kontrolü yapar
   *
   * @param  \Illuminate\Http\Request  $request
   * @return \Illuminate\Http\Response
   */
  public function checkUnique(Request $request)
  {
    $field = $request->input('field');
    $value = $request->input('value');
    $excludeId = $request->input('exclude_id');

    // Hangi alanı kontrol edeceğiz?
    $dbField = '';
    switch ($field) {
      case 'languageName':
      case 'editLanguageName':
        $dbField = 'name';
        break;
      case 'shortForm':
      case 'editShortForm':
      case 'languageCode':
      case 'editLanguageCode':
        $dbField = 'code';
        break;
      default:
        return response()->json(['unique' => true], 200);
    }

    // Var olan kayıt için sorgu hazırla
    $query = DB::table('languages')->where($dbField, $value);

    // Eğer exclude_id belirtilmişse, bu ID'yi kontrol dışı bırak
    if ($excludeId) {
      $query->where('id', '!=', $excludeId);
    }

    // Kayıt var mı kontrol et
    $exists = $query->exists();

    // Sonuç dön - eğer kayıt yoksa unique'dir
    return response()->json(['unique' => !$exists], 200);
  }
}



langugaes.js kodları aşağıdaki
